ui Directory Structure:
ui/
├── index.html
├── src/
│   ├── App.vue
│   ├── main.ts
│   ├── vite-env.d.ts
│   ├── shims-vue.d.ts
│   ├── views/
│   │   ├── CustomerScreen.vue
│   │   ├── StatusScreen.vue
│   │   ├── OperatorScreen.vue

index.html:
```
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Lecture 13 Smoothie Stand</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>

```

src/App.vue:
```
<template>
  <router-view />
</template>
```

src/main.ts:
```
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import { BootstrapVue, BootstrapVueIcons } from 'bootstrap-vue'

import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

import App from './App.vue'
import CustomerScreen from './views/CustomerScreen.vue'
import OperatorScreen from './views/OperatorScreen.vue'
import StatusScreen from './views/StatusScreen.vue'

const routes = [
  {
    path: "/customer/:customerId",
    component: CustomerScreen,
    props: ({ params: { customerId }}) => ({ customerId }),
  },
  {
    path: "/operator/:operatorId",
    component: OperatorScreen,
    props: ({ params: { operatorId }}) => ({ operatorId }),
  },
  {
    path: "/",
    component: StatusScreen,
  }
]

const router = createRouter({
	history: createWebHistory(),
	routes,
})

createApp(App)
	.use(BootstrapVue)
	.use(BootstrapVueIcons)
	.use(router)
	.mount('#app')


```

src/vite-env.d.ts:
```
/// <reference types="vite/client" />

```

src/shims-vue.d.ts:
```
declare module '*.vue' {
  import Vue from 'vue'
  export default Vue
}

```

src/views/CustomerScreen.vue:
```
<template>
  <div class="mx-3 my-3">
    <b-jumbotron bg-variant="primary" text-variant="white" :header="`Welcome, ${name}`" />

    <h2>Orders</h2>
    <b-button @click="refresh" class="mb-2">Refresh</b-button>
    <b-table v-if="customer" :items="customer.orders" />
    
    <h2>Draft Order</h2>
    Check the ingredients you want:
    <b-form-checkbox-group v-model="draftOrderIngredients" :options="possibleIngredients" />
    <div class="mt-2">
      <b-button @click="save">Save</b-button>
    </div>
    <div class="mt-2">
      <b-button @click="submit">Submit</b-button>
      Note: must save before submitting
    </div>
  </div>
</template>

<script setup lang="ts">
import { onMounted, ref, computed, Ref } from 'vue'
import { CustomerWithOrders } from "../../../server/data"

// props
interface Props {
  customerId: string
}

// default values for props
const props = withDefaults(defineProps<Props>(), {
  customerId: "",
})

const customer: Ref<CustomerWithOrders | null> = ref(null)

const name = computed(() => customer.value?.name || props.customerId)
const draftOrderIngredients: Ref<string[]> = ref([])
const possibleIngredients: Ref<string[]> = ref([])

async function refresh() {
  possibleIngredients.value = await (await fetch("/api/possible-ingredients")).json()

  if (props.customerId) {
    customer.value = await (await fetch("/api/customer/" + encodeURIComponent(props.customerId))).json()
    draftOrderIngredients.value = (await (await fetch("/api/customer/" + encodeURIComponent(props.customerId) + "/draft-order")).json())?.ingredients || []
  }
}
onMounted(refresh)

async function save() {
  await fetch(
    "/api/customer/" + encodeURIComponent(props.customerId) + "/draft-order",
    {
      headers: {
        "Content-Type": "application/json",
      },
      method: "PUT",
      body: JSON.stringify({ ingredients: draftOrderIngredients.value })
    }
  )
}

async function submit() {
  await fetch(
    "/api/customer/" + encodeURIComponent(props.customerId) + "/submit-draft-order",
    { method: "POST" }
  )
  await refresh()
}
</script>
```

src/views/StatusScreen.vue:
```
<template>
  <div class="mx-3 my-3">
    <b-jumbotron header="Smoothie Status" />
    <b-button @click="refresh" class="mb-2">Refresh</b-button>
    <b-table :items="orders" />
  </div>
</template>

<script setup lang="ts">
import { onMounted, ref } from 'vue'

const orders: Ref<Order[]> = ref([])

async function refresh() {
  orders.value = await (await fetch("/api/orders")).json()
}
onMounted(refresh)
</script>
```

src/views/OperatorScreen.vue:
```
<template>
  <div class="mx-3 my-3">
    <b-jumbotron bg-variant="info" text-variant="white" :header="`Work Screen for ${name}`" />
    <h2>Orders</h2>
    <b-button @click="refresh" class="mb-2">Refresh</b-button>
    <b-table :items="orders" :fields="fields">
      <template #cell(operatorId)="cellScope">
        <span v-if="cellScope.value">
          {{ cellScope.value }}
          <b-button @click="updateOrder(cellScope.item._id, 'done')" v-if="cellScope.value === operatorId && cellScope.item.state !== 'done'">
            Done
          </b-button>
        </span>
        <b-button v-else @click="updateOrder(cellScope.item._id, 'blending')">Start Blending</b-button>
      </template>
    </b-table>
  </div>
</template>

<script setup lang="ts">
import { onMounted, ref, computed, Ref } from 'vue'
import { Operator, Order } from "../../../server/data"

// props
interface Props {
  operatorId: string
}

// default values for props
const props = withDefaults(defineProps<Props>(), {
  operatorId: "",
})

const operator: Ref<Operator | null> = ref(null)
const orders: Ref<Order[]> = ref([])

const name = computed(() => operator.value?.name || props.operatorId)

async function refresh() {
  if (props.operatorId) {
    operator.value = await (await fetch("/api/operator/" + encodeURIComponent(props.operatorId))).json()
  }
  orders.value = await (await fetch("/api/orders/")).json()
}
onMounted(refresh)

const fields = ["_id", "customerId", "state", "ingredients", "operatorId"]

async function updateOrder(orderId: string, state: string) {
  await fetch(
    "/api/order/" + encodeURIComponent(orderId),
    {
      headers: {
        "Content-Type": "application/json",
      },
      method: "PUT",
      body: JSON.stringify({
        operatorId: props.operatorId,
        state,
      })
    }
  )
  await refresh()
}
</script>
```

